{"version":3,"file":"static/js/cast-page.7bd0535a.chunk.js","mappings":"2SAGaA,EAAOC,EAAAA,EAAAA,GAAH,0EAMJC,EAAOD,EAAAA,EAAAA,GAAH,yhBA8BJE,EAAeF,EAAAA,EAAAA,IAAH,0BAIZG,EAAQH,EAAAA,EAAAA,IAAH,6CAILI,EAAcJ,EAAAA,EAAAA,IAAH,0BAIXK,EAAOL,EAAAA,EAAAA,EAAH,+C,SC/CF,SAASM,EAAT,GAAgC,IAAVC,EAAS,EAATA,OAEjC,OACI,SAACC,EAAA,EAAD,WACE,SAACT,EAAD,UACGQ,EAAOE,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvB,OACE,UAACX,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CACEU,IACED,GAAK,0CAAuCA,GAE9CE,IAAKH,OAGT,SAACP,EAAD,WACA,SAACC,EAAD,UAAOM,QAVED,UAoB3BJ,EAAWS,UAAY,CACnBR,OAAQS,IAAAA,QACNA,IAAAA,MAAgB,CACdN,GAAIM,IAAAA,OACJL,KAAMK,IAAAA,OACNJ,MAAOI,IAAAA,UAETC,YCGN,MApCA,WACA,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOX,EAAP,KAAeY,EAAf,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QA8BP,OA5BAE,EAAAA,EAAAA,YAAU,WAAI,wCACV,wGACiBC,EAAAA,GAAsBH,GADvC,gBACGI,EADH,EACGA,KAEDC,EAAc,GACpBD,EAAKf,KAAI,YAA+B,IAC9BiB,EAAQ,CACZhB,GAFiC,EAA5BA,GAGLC,KAHiC,EAAxBA,KAITC,MAJiC,EAAlBe,cAOjB,OAAOF,EAAYG,KAAKF,MAE5BP,EAAUM,GAbN,4CADU,sBAiBV,KAjBW,WAAD,wBAmBNI,GAGA,MAAOC,OAIb,CAACV,IAEIb,IAAU,SAACD,EAAD,CAAYC,OAAQA","sources":["components/ActorsList/ActorList.styled.jsx","components/ActorsList/ActorList.js","pages/Cast.js"],"sourcesContent":["import styled from '@emotion/styled';\n\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\nmargin: -15px;\n`;\n\nexport const Item = styled.li`\n  \nflex-basis: calc((100% - 2 * 30px) / 2);\nmargin: 11px;\n\n@media screen and (min-width: $tablet) {\n  flex-basis: calc((100% - 3 * 30px) / 3);\n}\n\n@media screen and (min-width: $desktop) {\n  flex-basis: calc((100% - 4 * 30px) / 4);\n}\n\n\n\n\nborder: 1px solid rgba(238, 238, 238, 1);\n\nborder-radius: 4px;\ncolor: #afb1b8;;\ntransition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1), color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n&:hover,\n&:focus {\n  color: #3f51b5;\n  border-color: #3f51b5;\n}\n\n`;\n\nexport const PhotoWrapper = styled.div`\n\n`;\n\nexport const Photo = styled.img`\nmargin-bottom: 5px;\n`;\n\nexport const NameWrapper = styled.div`\n\n`;\n\nexport const Name = styled.p`\ntext-align: center;\n\n`;\n","import propTypes from 'prop-types';\nimport Container from 'components/Container';\nimport { List, Item, PhotoWrapper, Photo, NameWrapper, Name } from './ActorList.styled';\n\nexport default function ActorsList ({actors}) {\n// console.log(actors)\n    return (\n        <Container>\n          <List>\n            {actors.map(({ id, name, photo }) => {\n              return (\n                <Item key={id}>\n                  <PhotoWrapper>\n                    <Photo\n                      src={\n                        photo && `https://image.tmdb.org/t/p/w500/${photo}` \n                      }\n                      alt={name}\n                    />\n                  </PhotoWrapper>\n                  <NameWrapper>\n                  <Name>{name}</Name>\n                  </NameWrapper>\n                </Item>\n              );\n            })}\n          </List>\n        </Container>\n      );\n}\n\nActorsList.prototype = {\n    actors: propTypes.arrayOf(\n      propTypes.shape({\n        id: propTypes.number,\n        name: propTypes.string,\n        photo: propTypes.string,\n      }),\n    ).isRequired,\n  };","import { useState, useEffect } from \"react\";\nimport * as API from '../services/api'\nimport { useParams } from \"react-router-dom\";\nimport ActorsList from \"components/ActorsList\";\n\nfunction CastPage () {\nconst [actors, setActors] = useState(null)\nconst {movieId} = useParams()\n\nuseEffect(()=>{\n    async function fetchAndSetDataFromBackend () {\nconst {cast} = await API.fetchMovieCredits(movieId)\n// console.log(cast)\nconst actorsArray = []\ncast.map(({id, name, profile_path}) => {\n    const actor = {\n      id,\n      name,\n      photo: profile_path,\n    };\n\n    return actorsArray.push(actor);\n  })\nsetActors(actorsArray)\n    }\n\n    try {\n   \n        fetchAndSetDataFromBackend();\n    \n      \n      } catch (err) {\n      //   setError(err.message);\n      }\n\n},[movieId])\n\nreturn actors && <ActorsList actors={actors} />;\n\n}\n\nexport default CastPage"],"names":["List","styled","Item","PhotoWrapper","Photo","NameWrapper","Name","ActorsList","actors","Container","map","id","name","photo","src","alt","prototype","propTypes","isRequired","useState","setActors","movieId","useParams","useEffect","API","cast","actorsArray","actor","profile_path","push","fetchAndSetDataFromBackend","err"],"sourceRoot":""}