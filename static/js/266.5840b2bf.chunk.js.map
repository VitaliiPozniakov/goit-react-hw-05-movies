{"version":3,"file":"static/js/266.5840b2bf.chunk.js","mappings":"oMAEaA,EAAUC,EAAAA,EAAAA,GAAH,mE,SCEPC,EAAOD,EAAAA,EAAAA,GAAH,2EAOJE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,mRAmBVI,EAAQJ,EAAAA,EAAAA,GAAH,0B,kCCxBlB,SAASK,EAAT,GAAmC,IAAdC,EAAa,EAAbA,GAAIC,EAAS,EAATA,MACnBC,GAAWC,EAAAA,EAAAA,MACf,OAAO,8BACJF,IAAU,SAACN,EAAD,WACT,SAACC,EAAD,CAAYQ,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMJ,GAAhD,UACE,SAACJ,EAAD,UAAQG,UAMhBF,EAAUQ,UAAY,CACpBP,GAAIQ,IAAAA,OACJP,MAAOO,IAAAA,QAGT,QClBe,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,OACjC,OACI,SAACjB,EAAD,UACCiB,EAAOC,KAAI,YAAoB,IAAjBX,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,SAAC,EAAD,CAEED,GAAIA,EACJC,MAAOA,GAFFD,QAUnBS,EAAWF,UAAY,CACrBG,OAAQF,IAAAA,QACNA,IAAAA,MAAgB,CACdR,GAAIQ,IAAAA,OACJP,MAAOO,IAAAA,UAETI,a,qJCnBW,SAASC,IAEpB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOJ,EAAP,KAAeK,EAAf,KA+BJ,OA5BAC,EAAAA,EAAAA,YAAW,WAAI,wCAEf,wGACyBC,EAAAA,KADzB,gBACQC,EADR,EACQA,QACDC,EAAc,GAEpBD,EAAQP,KAAI,YAAyB,IAC3BS,EAAQ,CACVpB,GAF4B,EAAtBA,GAGNC,MAH4B,EAAlBoB,gBAMZ,OAAOF,EAAYG,KAAKF,MAG/BL,EAAUI,GAbV,4CAFe,sBAkBf,KAlBgB,WAAD,wBAoBXI,GAGA,MAAOC,OAGT,IAGEd,IACE,SAAC,IAAD,WACE,SAAC,IAAD,CAAYA,OAAQA,Q,mLC3CtBe,EAAU,mCACVC,EAAW,6BAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,cACQE,EADR,yBAESA,EAASC,GAAKD,EAASE,OAASC,QAAQC,OAAO,IAAIC,MAAM,eAFlE,mEAKO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBD,EADwB,uCACeD,IAIvC,SAASa,EAAYC,GAC1B,OAAOZ,EAAuB,GAAD,OACxBD,EADwB,mCACWD,EADX,kBAC4Bc,EAD5B,+CAKxB,SAASC,EAAkBC,GAChC,OAAOd,EAAuB,GAAD,OACxBD,EADwB,oBACJe,EADI,oBACehB,EADf,oBAKxB,SAASiB,EAAkBD,GAChC,OAAOd,EAAuB,GAAD,OACxBD,EADwB,oBACJe,EADI,4BACuBhB,EADvB,oBAKxB,SAASkB,EAAkBF,GAChC,OAAOd,EAAuB,GAAD,OACxBD,EADwB,oBACJe,EADI,4BACuBhB,EADvB","sources":["components/MoviesList/MoviesList.styled.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","pages/Home.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.ul`\nlist-style: square;\n  margin-left: 15px;\n`;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\n\nexport const Item = styled.li`\n&:not(:last-child) {\n    margin-bottom: 10px;\n}\n`;\n\n\nexport const CustomLink = styled(Link)`\ndisplay: inline-block;\ntext-decoration: none;\n\ncolor: #2a363b;\n  font-size: 14px;\n  font-weight: 700;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &.active {\n    color: #3f51b5;\n\n  }\n\n  &:hover{\n      color: #3f51b5;\n  }\n`;\n\nexport const Title = styled.h2`\n\n`;\n\n\n\n","import { Item, Title, CustomLink } from './MovieCard.styled';\nimport propTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\n\n\nfunction MovieCard({ id, title }) {\nconst location = useLocation()\n  return <>\n    {title && (<Item>\n      <CustomLink to={`/movies/${id}`} state={{ from: location }}>\n        <Title>{title}</Title>\n      </CustomLink>\n    </Item>)}</>\n  \n}\n\nMovieCard.prototype = {\n  id: propTypes.number,\n  title: propTypes.string,\n};\n\nexport default MovieCard;\n","import { Wrapper } from \"./MoviesList.styled\";\nimport MovieCard from \"components/MovieCard\";\nimport propTypes from 'prop-types'\n\nexport default function MoviesList ({movies}) {\n    return (\n        <Wrapper>\n        {movies.map(({ id, title }) => {\n          return (\n            <MovieCard\n              key={id}\n              id={id}\n              title={title}\n            />\n          );\n        })}\n      </Wrapper>\n    )\n}\n\nMoviesList.prototype = {\n  movies: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      title: propTypes.string,\n    }),\n  ).isRequired,\n};","\nimport { useEffect, useState } from \"react\"\nimport * as API from '../services/api'\nimport Container from \"components/Container\"\nimport MoviesList from \"components/MoviesList\"\n\n\nexport default function HomePage () {\n   \n    const [movies, setMovies] = useState(null)\n   \n\nuseEffect (()=>{\n\nasync function fetchAndSetDataFromBackend () {\n const {results} = await API.fetchTrending()\n const moviesArray = []\n\n results.map(({id, original_title})=>{\n     const movie = {\n         id,\n         title: original_title,\n   \n       };\n       return moviesArray.push(movie);\n})\n\nsetMovies(moviesArray)\n     \n}\ntry {\n   \n    fetchAndSetDataFromBackend();\n\n  \n  } catch (err) {\n  //   setError(err.message);\n  }\n},[])\n\nreturn (\n    movies && (\n      <Container>\n        <MoviesList movies={movies} />\n      </Container>\n    )\n  );\n}","const API_KEY = 'c82323a9bebf6624949ce9fae3cb7c73';\nconst BASE_URL = 'https://api.themoviedb.org';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const responce = await fetch(url, config);\n  return responce.ok ? responce.json() : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/trending/all/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieDetails(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n"],"names":["Wrapper","styled","Item","CustomLink","Link","Title","MovieCard","id","title","location","useLocation","to","state","from","prototype","propTypes","MoviesList","movies","map","isRequired","HomePage","useState","setMovies","useEffect","API","results","moviesArray","movie","original_title","push","fetchAndSetDataFromBackend","err","API_KEY","BASE_URL","fetchWithErrorHandling","url","config","fetch","responce","ok","json","Promise","reject","Error","fetchTrending","fetchMovies","query","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}