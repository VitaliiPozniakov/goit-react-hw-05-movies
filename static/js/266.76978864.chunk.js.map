{"version":3,"file":"static/js/266.76978864.chunk.js","mappings":"sMAEaA,EAAUC,EAAAA,EAAAA,GAAH,uI,SCEPC,EAAOD,EAAAA,EAAAA,GAAH,8RAgBJE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,qSAoBVI,EAAQJ,EAAAA,EAAAA,EAAH,wKAWLK,EAASL,EAAAA,EAAAA,IAAH,iR,kCC/CnB,SAASM,EAAT,GAA2C,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAGxBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,8BACGH,IACC,SAACP,EAAD,WACE,UAACC,EAAD,CAAYU,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMJ,GAAhD,WACE,SAACL,EAAD,CACEU,IAAKN,GAAM,0CAAuCA,GAClDO,IAAKR,KAEP,SAACJ,EAAD,UAAQI,WAQpBF,EAAUW,UAAY,CACpBV,GAAIW,IAAAA,OACJV,MAAOU,IAAAA,QAGT,QC1Be,SAASC,EAAT,GAAgC,IAAVC,EAAS,EAATA,OACjC,OACI,SAACrB,EAAD,UACCqB,EAAOC,KAAI,YAA4B,IAAzBd,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACxB,OACE,SAAC,EAAD,CAEEF,GAAIA,EACJC,MAAOA,EACPC,OAAQA,GAHHF,QAWnBY,EAAWF,UAAY,CACrBG,OAAQF,IAAAA,QACNA,IAAAA,MAAgB,CACdX,GAAIW,IAAAA,OACJV,MAAOU,IAAAA,UAETI,a,qJCpBW,SAASC,IAEpB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOJ,EAAP,KAAeK,EAAf,KA+BJ,OA5BAC,EAAAA,EAAAA,YAAW,WAAI,wCAEf,wGACyBC,EAAAA,KADzB,gBACQC,EADR,EACQA,QACDC,EAAc,GAEpBD,EAAQP,KAAI,YAAsC,IACxCS,EAAQ,CACVvB,GAFyC,EAAnCA,GAGNC,MAHyC,EAA/BuB,eAIVtB,OAJyC,EAAfuB,aAM5B,OAAOH,EAAYI,KAAKH,MAG/BL,EAAUI,GAbV,4CAFe,sBAkBf,KAlBgB,WAAD,wBAoBXK,GAGA,MAAOC,OAGT,IAGEf,IACE,SAAC,IAAD,WACE,SAAC,IAAD,CAAYA,OAAQA,Q,mLC3CtBgB,EAAU,mCACVC,EAAW,6BAAjB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,cACQE,EADR,yBAESA,EAASC,GAAKD,EAASE,OAASC,QAAQC,OAAO,IAAIC,MAAM,eAFlE,mEAKO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBD,EADwB,uCACeD,IAIvC,SAASa,EAAYC,GAC1B,OAAOZ,EAAuB,GAAD,OACxBD,EADwB,mCACWD,EADX,kBAC4Bc,EAD5B,+CAKxB,SAASC,EAAkBC,GAChC,OAAOd,EAAuB,GAAD,OACxBD,EADwB,oBACJe,EADI,oBACehB,EADf,oBAKxB,SAASiB,EAAkBD,GAChC,OAAOd,EAAuB,GAAD,OACxBD,EADwB,oBACJe,EADI,4BACuBhB,EADvB,oBAKxB,SAASkB,EAAkBF,GAChC,OAAOd,EAAuB,GAAD,OACxBD,EADwB,oBACJe,EADI,4BACuBhB,EADvB","sources":["components/MoviesList/MoviesList.styled.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","pages/Home.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.ul`\n@media (min-width: 768px) {\n  display: flex;\n  flex-wrap: wrap;\n  margin: -10px;\n\n  margin-top: 20px;\n}\n`;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\n\nexport const Item = styled.li`\n@media (max-width: 767px) {\n  margin-bottom: 50px;\n}\n@media (min-width: 768px) {\n  display: flex;\n  justify-content: center;\n  width: calc((100% - 4 * 10px) / 2);\n  margin: 10px;\n}\n@media (min-width: 1440px) {\n  width: calc((100% - 6 * 10px) / 3);\n}\n`;\n\n\nexport const CustomLink = styled(Link)`\ndisplay: inline-block;\ntext-decoration: none;\ncursor: pointer;\n\ncolor: #2a363b;\n  font-size: 14px;\n  font-weight: 700;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &.active {\n    color: #3f51b5;\n\n  }\n\n  &:hover{\n      color: #3f51b5;\n  }\n`;\n\nexport const Title = styled.p`\nfont-size: 20px;\nfont-weight: 700;\ntext-align: center;\nwidth: 300px;\nmargin-bottom: 15px;\n@media (min-width: 768px) {\n  width: 350px;\n}\n`;\n\nexport const Poster = styled.img`\nwidth: 300px;\nborder-radius: 5px;\nmargin-bottom: 15px;\n@media (min-width: 768px) {\n  width: 350px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.01);\n    box-shadow: 0px 0px 20px 3px #3f51b5;\n}\n`;\n\n\n\n","import { Item, Title, CustomLink, Poster } from './MovieCard.styled';\nimport propTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nfunction MovieCard({ id, title, poster }) {\n  // console.log(poster);\n\n  const location = useLocation();\n  return (\n    <>\n      {title && (\n        <Item>\n          <CustomLink to={`/movies/${id}`} state={{ from: location }}>\n            <Poster\n              src={poster && `https://image.tmdb.org/t/p/w500/${poster}`}\n              alt={title}\n            />\n            <Title>{title}</Title>\n          </CustomLink>\n        </Item>\n      )}\n    </>\n  );\n}\n\nMovieCard.prototype = {\n  id: propTypes.number,\n  title: propTypes.string,\n};\n\nexport default MovieCard;\n","import { Wrapper } from \"./MoviesList.styled\";\nimport MovieCard from \"components/MovieCard\";\nimport propTypes from 'prop-types'\n\nexport default function MoviesList ({movies}) {\n    return (\n        <Wrapper>\n        {movies.map(({ id, title, poster }) => {\n          return (\n            <MovieCard\n              key={id}\n              id={id}\n              title={title}\n              poster={poster}\n            />\n          );\n        })}\n      </Wrapper>\n    )\n}\n\nMoviesList.prototype = {\n  movies: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.number,\n      title: propTypes.string,\n    }),\n  ).isRequired,\n};","\nimport { useEffect, useState } from \"react\"\nimport * as API from '../services/api'\nimport Container from \"components/Container\"\nimport MoviesList from \"components/MoviesList\"\n\n\nexport default function HomePage () {\n   \n    const [movies, setMovies] = useState(null)\n   \n\nuseEffect (()=>{\n\nasync function fetchAndSetDataFromBackend () {\n const {results} = await API.fetchTrending()\n const moviesArray = []\n\n results.map(({id, original_title, poster_path})=>{\n     const movie = {\n         id,\n         title: original_title,\n         poster: poster_path,\n       };\n       return moviesArray.push(movie);\n})\n\nsetMovies(moviesArray)\n     \n}\ntry {\n   \n    fetchAndSetDataFromBackend();\n\n  \n  } catch (err) {\n  //   setError(err.message);\n  }\n},[])\n\nreturn (\n    movies && (\n      <Container>\n        <MoviesList movies={movies} />\n      </Container>\n    )\n  );\n}","const API_KEY = 'c82323a9bebf6624949ce9fae3cb7c73';\nconst BASE_URL = 'https://api.themoviedb.org';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const responce = await fetch(url, config);\n  return responce.ok ? responce.json() : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/trending/all/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovies(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieDetails(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n"],"names":["Wrapper","styled","Item","CustomLink","Link","Title","Poster","MovieCard","id","title","poster","location","useLocation","to","state","from","src","alt","prototype","propTypes","MoviesList","movies","map","isRequired","HomePage","useState","setMovies","useEffect","API","results","moviesArray","movie","original_title","poster_path","push","fetchAndSetDataFromBackend","err","API_KEY","BASE_URL","fetchWithErrorHandling","url","config","fetch","responce","ok","json","Promise","reject","Error","fetchTrending","fetchMovies","query","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews"],"sourceRoot":""}